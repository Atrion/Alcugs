#!/bin/bash
# /*******************************************************************************
# *    Alcugs H'uru server                                                       *
# *                                                                              *
# *    Copyright (C) 2004  The Alcugs H'uru Server Team                          *
# *    See the file AUTHORS for more info about the team                         *
# *                                                                              *
# *    This program is free software; you can redistribute it and/or modify      *
# *    it under the terms of the GNU General Public License as published by      *
# *    the Free Software Foundation; either version 2 of the License, or         *
# *    (at your option) any later version.                                       *
# *                                                                              *
# *    This program is distributed in the hope that it will be useful,           *
# *    but WITHOUT ANY WARRANTY; without even the implied warranty of            *
# *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
# *    GNU General Public License for more details.                              *
# *                                                                              *
# *    You should have received a copy of the GNU General Public License         *
# *    along with this program; if not, write to the Free Software               *
# *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *
# *                                                                              *
# *    Please see the file COPYING for the full license.                         *
# *    Please see the file DISCLAIMER for more details, before doing nothing.    *
# *                                                                              *
# *                                                                              *
# *******************************************************************************/
#
# Installation script
# This script, will create the required tree for the correct server operation
#
# TODO: permissions, and check if we are the ROOT user, parse the old files
# if them exist
#
# $Id$
#

config="/tmp/huru_config$$"

# Defaults

bin="bin"					# where to store binaries
verbose_level=3		# verbosity level 0->3
bandwidth=2048		# bandwidth in Mbps
bind=127.0.0.1		# bind
#public_address=	# automatically computed
#private_mask=		# automatically computed
#website					# automatically computed
dataset=5
private_ages="AvatarCustomization,Personal,Nexus"
log_files_path="var/log"
sdl="var/sdl"
age="var/age"
db_server="localhost"
db_username="huru"
db_password="huru"
db_name="huru"
shard_name="Unconfigured"
shard_description="Unconfigures Shard"
shard_website="http://www.google.fr"
shard_contact="mailto:god AT universe DOT com"
shard_password="huru"
allow_unknown_accounts=1
auto_register_account=0

# Local functions

trapint() {
	rm -f $config
	exit
}

get_config()
{
  FILE=$1
  section="[global]"

	[ ! -f $FILE ] && return
	rm -f $config
	cat $FILE |
	while read line; do
		type=`echo $line | grep "^\[.*\].*"`
		if [ -n "$type" ]; then
			section=$type
		else
			echo "$section $line" >>$config
		fi
	done
}

read_config()
{
  FILE=$1
  OPTION=$2
	SECTION=$3
	
	[ ! -f $FILE ] && echo ""
	line=`grep "^\[$SECTION\] ${OPTION}[ 	]*=" $FILE`
	[ -z "$line" ] && echo ""
  res=`echo $line | awk -F"=" '{ print $2 }'`
	echo $res
}

get_default()
{
  local res=""

  OPTION=$1
	SECTION=$2

  #name=\$"$1"
  #def=`eval "expr \"$name\" "` 
	#echo "default $OPTION=$def"

	if [ $use_defaults -eq 1 ]; then
		res=`read_config $config $OPTION $SECTION`
		if [ -n "$res" ]; then
		  eval "$OPTION=$res"
  	else # now try global if couldn't find in specific section
		  if [ "$SECTION" != "global" ]; then
			  res=`read_config $config $OPTION global`
				[ -n "$res" ] && eval "$OPTION=$res"
			fi
		fi
	fi
}

trap trapint int

#script version
ver="1.4"

#ask for metaserver?
ask_meta=1

if [ -z "$1" ]; then
	echo "Usage: ./install.sh [devel | normal] [location-path]"
	exit
fi

## available options
# auto - Fork on demand?
# max_players - (Don't touch, leave it big, or you will have problems due to a bug)

if [ "$1" == "devel" ]; then
	#set here optimal options for a development install
	auto=0
	max_players=200
	ask_meta=0
elif [ "$1" == "normal" ]; then
	#set here optimal options for a normal install
	auto=1
	max_players=300
else
	echo "Usage: ./install.sh [devel | normal] [location-path]"
	exit
fi

if [ -n "$2" ]; then
	path=$2
	if [ "$1" == "devel" ]; then
		echo "The devel installation can't be installed outside the source tree, use the normal one instead"
		exit
	fi
else
	path="./"
fi

valid=0; #validated by the user

while [ $valid -ne 1 ];
do

	doet=0

	#1st Path
	echo "##################################################"
	echo "Alcugs H'uru servers automatic installation script"
	echo " Script version: $ver "
	echo ""
	if [[ "`whoami`" == "root" ]]; then
		echo "Note: You are running this script with root privilegues"
		echo "Installation should not be done as root"
		echo "Please run the script as the same user that is going to run the servers"
		exit
	else
		runuser=`whoami`
		echo "The script has configured the default user to run the servers as $runuser."
		echo "You can change it at any moment editing the startup script"
	fi
	while [ $doet -ne 1 ];
	do
	  echo
		echo -en "* Installing servers at: $path ? [y/n] (default y): "
		read ans
		[ -z "$ans" ] && ans="y"
		case "$ans" in
		  y|Y)	echo "  Servers will be installed at: $path"
						doet=1
			;;
			n|N)	echo "  Please type ./install $1 /where/you/want/to/install/the/servers"
						doet=1
						exit
			;;
			*)		echo "  Please, Enter a valid choice..."
						doet=0
			;;
		esac
	done


	#2nd Cluster
	echo ""
	echo "__________________________________________________________________"
	echo "** Cluster Installation **"
	echo "Note: At current time, each node MUST have his own Public address"

	doet=0
	while [ $doet -ne 1 ];
	do
		echo
		echo -en "* Are you doing a cluster installation? [y/n] (default n): "
		read res
		[ -z "$res" ] && ans="n"
		case "$ans" in
		  y|Y)	echo "  Doing cluster installation..."
						cluster=1
						doet=1
			;;
			n|N)	echo "  Doing single installation..."
						cluster=0
						doet=1
			;;
			*)		echo "  Please, Enter a valid choice..."
						doet=0
			;;
		esac
	done

	#if cluster then ask servers to install
	if [ $cluster -eq 1 ]; then

		echo ""
		echo "__________________________________________________________________"
		echo "** Setting up the Auth Server **"
		echo "Note: You are able to run several auth servers at different machines"
		echo "      the auth server needs access to auth.plasma.corelands.com:80 for"
		echo "      end user validation."
		echo "Do you want to run the auth server at this machine? [Y/n]"
		read res
		if [[ "$res" == "N"  || "$res" == "n" ]]; then
			auth=0
		else
			auth=1
		fi

		echo ""
		echo "__________________________________________________________________"
		echo "** Setting up the Vault Server **"
		echo "Note: You MUST run only ONE vault server"
		echo "Do you want to run the vault server at this machine? [Y/n]"
		read res
		if [[ "$res" == "N"  || "$res" == "n" ]]; then
			vault=0
		else
			vault=1
		fi

		echo ""
		echo "__________________________________________________________________"
		echo "** Setting up the Tracking Server **"
		echo "Note: You MUST run only ONE tracking server"
		echo "Do you want to run the tracking server at this machine? [Y/n]"
		read res
		if [[ "$res" == "N"  || "$res" == "n" ]]; then
			track=0
		else
			track=1
		fi

		echo ""
		echo "__________________________________________________________________"
		echo "** Setting up the Lobby/Game(s) Server(s) **"
		echo "Note: You are able to run several game servers at different machines"
		echo "Do you want to run game(s) server(s) at this machine? [Y/n]"
		read res
		if [[ "$res" == "N"  || "$res" == "n" ]]; then
			lobby=0
		else
			lobby=1
		fi

	else
		auth=1;
		vault=1;
		track=1;
		lobby=1;
	fi


	# Initialize configuration file
	echo
	echo
	echo "  Creating installation tree"
  current=`pwd`
	[ ! -d "$path" ] && mkdir $path
  cd $path
  destination=`pwd`
  conf_path="$destination/etc/uru.conf"

	use_defaults=0
  if [ -f $conf_path ]; then
	  echo ""
		echo "* Found an already existing uru.conf file. This installer can try to get"
		echo -en "  default answers from this file. Do you want to use it ? [y/n] (defaylt y): "
    read ans
		[ -z "$ans" ] && ans="y"
		case "$ans" in
		  y|Y)	echo "  We'll use defaults from this file. Reading it..."
						get_config $conf_path
						use_defaults=1;
			;;
			*)		echo "  We won't use defaults from this file"
						use_defaults=0
			;;
		esac
  fi

	echo "  Initializing environnement"
	mkdir -p etc
  mkdir -p var etc
	[ -f $conf_path ] && echo "  Renaming your uru.conf to uru.conf.old" && mv -f $conf_path ${conf_path}.old
	touch $conf_path
	echo "  Setting proper permissions on uru.conf"
	chmod 600 $conf_path
	cd $current

	#now ask the global options
	echo ""
	echo "------------------------------------------------------------------"
	echo "** GLOBAL OPTIONS **"
	echo "------------------------------------------------------------------"
	bin="$destination/$bin" # override to store complete path
  get_default bin lobby
	echo ""
	echo -en "* Do you want to put binaries in '$bin' directory ? [y/n] (default y): "
	read ans
	[ -z "$ans" ] && ans="y"
	case "$ans" in
	  y|Y)	echo "  Binaries will be installed in $bin"
		;;
		*)		echo "  Keeping binaries in uru_* directories"
					bin=""
		;;
	esac

	doet=0
	while [ $doet -ne 1 ];
	do
		get_default verbose_level global
		echo ""
		echo "* Please set the verbose level used in the log files:"
		echo "   3-> print all messages to the stdout (default)"
		echo "   2-> print only informative and error messages"
		echo "   1-> print only error messages"
		echo "   0-> total silence, perfect for daemon mode"
		echo
		echo -en "* Select a level [0/1/2/3] (default $verbose_level): "
		read ans
		[ -z "$ans" ] && ans=$verbose_level
		case "$ans" in
		  0|1|2|3)	verbose_level=$ans
								echo "  Using verbose_level $verbose_level"
								doet=1
			;;
			*)				echo "  Invalid choice"
			;;
		esac
  done

  get_default bandwidth global
	echo ""
	echo -en "* Server Bandwidth, type your uplink in kilobits per second (kbps, default $bandwidth):"
	read ans
	bandwidth=${ans:-$bandwidth}
  echo "  I will use $bandwidth"

	get_default bind global
  localip=`hostname --ip`
	echo ""
	echo "* Please enter the global bind address: (enter the public if there isn't any private"
	echo -en "  address) (your current ip=$localip, default $bind = bind all): "
	read ans

	#set the bind address. Note, if there are multiple interfaces or ip's,
	# clients placed inside the LAN will use the default address
	# BUG: server binds to 172.26.0.10 and 172.26.0.11, default interface
	# is 172.26.0.10, client conects to 172.26.0.11, server will answer
	# from 172.26.0.10 and then the client will reject the message because
	# it's comming from another address.
	# TODO: Allow several "bind = address" entryes.
	global_bind=${ans:-$bind}
	echo "  I will bind to $global_bind"

	get_default bind vault
	echo ""
	echo "* Please enter IP address for the *local* uru_servers (enter your private address"
	echo -en "  here) (your current ip=$localip"
	if [ -n "$bind" ]; then
	  echo -en ", default is $bind) :"
	else
		echo -en ", which is the default): "
	fi
	read private_ip
	if [ -n "$bind" ]; then
		private_ip=${ans:-$bind}
	else
		[ -z "$ans" ] && private_ip=$localip
	fi
	echo "  I will use $private_ip"

	get_default public_address global
  fqdn=`hostname --fqdn`
	echo ""
	echo "* Please enter server public hostname: (type the private one if the server is not"
	echo -en " public). "
	if [ -n "$public_address" ]; then
	  echo -en "Default found is $public_address) : "
	else
		echo -en "If you are NATed, your FQDN is $fqdn, n for none: "
	fi
	read ans
	case "$ans" in
	  n|N)	echo "  We're using presenting our public hostname"
		;;
		*)	[ -z "$ans" ] && public_address=$fqdn
				if [ -n "$public_address" ]; then
	  			public_address=${ans:-$public_address}
				else
	  			[ -z "$ans" ] && public_address=$fqdn
				fi
				echo "  I will use $public_address"
		;;
	esac

  get_default private_mask global
	defmask=`/sbin/ifconfig 2>/dev/null | grep $localip | awk '{ print $4 }' | awk -F: '{ print $2 }'`
	echo ""
	echo "* Please enter the private network mask: (For example 255.255.255.0 if you have a"
	echo "  class C network, enter 255.255.255.255 if there isn't any private network and"
	echo "  0.0.0.0 if there isn't public access to the server)."
	if [ -n "$private_mask" ]; then
	  echo -en "  Default found is $private_mask : "
	else
		echo -en "  Your current netmask is $defmask and is the default answer: "
	fi
	read ans
	if [ -n "$private_mask" ]; then
		private_mask=${ans:-$private_masq}
	else
		[ -z "$ans" ] && private_mask=$defmask
	fi
	echo "  I will use $private_mask"

  get_default website global
  www="http://$fqdn"
  echo ""
	echo "* Please enter the website address that will be displayed when a client"
	if [ -n "$website" ]; then
	  echo -en "  logs in. Default is $website, n for none) : "
	else
		echo -en "  logs in. Default is $www, n for none): "
	fi
	read ans
	case "$ans" in
	  n|N)	echo "  We're not advertising a website"
					website=""
		;;
		*)	if [ -n "$website" ]; then
					website=${ans:-$website}
				else
					[ -z "$website" ] && website=$www
				fi
				echo "  I will use $website"
		;;
	esac

	get_default dataset global
	doet=0
	while [ $doet -ne 1 ];
	do
	  echo
		echo "* DataSet: (The type of clients that you want)"
		echo "  0 -> custom"
		echo "  1 -> prime '10-02-2003 Branch - Built 10/9/2003 at 6:53 A'"
		echo "  2 -> prime12 '10-24-2003 Branch - Built 11/12/2003 at 1:12 PM'"
		echo "  3 -> live/UU 'Build37 Branch - Built 7/30/2004 at 2:38 PM'"
		echo "  4 -> todni 'Exp1 Branch - Built 3/9/2004 at 11:39 AM'"
		echo "  5 -> tpots 'Main Branch - Built 5/26/2004 at 5:19 PM'"
		echo "  6 -> tpots2 'Alcugs H'uru official client patch distro for tpots'"
		echo "  7 and above -> '3rd party client patch distros' (each group working on a client distro MUST use an unique DataSet id)"
		echo -en "* Enter your choice [0/1/2/3/4/5/6/7] (default $dataset): "
		read ans
		[ -z "$ans" ] && ans=$dataset
		case "$ans" in
		  0|1|2|3|4|5|6|7)	dataset=$ans
												echo "  Using dataset $dataset"
												doet=1
			;;
			*)								echo "  Invalid choice"
			;;
		esac
	done

  get_default private_ages global
  echo ""
	echo -en "* Please enter private ages, separated by comma (default $private_ages) : "
	read ans
	private_ages="${ans:-$private_ages}"

	log_files_path="$destination/$log_files_path"
	get_default log_files_path vault	# hack to get basename dir from all log files
	[ -n "$log_files_path" ] && log_files_path=`echo $log_files_path | sed 's/\/vault.*//'`
  echo ""
	echo -en "* Where do you want to store server's logs ? (relative to $path, default $log_files_path...): "
  read ans
  if [ -z "$ans" ]; then
		logpath=$log_files_path
	else
		logpath=$destination/$ans
	fi
	echo "  I will use $logpath"
	[ ! -d "$logpath" ] && mkdir -p $logpath

  sdl="$destination/sdl"
	get_default sdl global
  echo
	echo -en "* Please enter location of your sdl folder (relative to $path, default $sdl): "
	read ans
	if [ -z "$ans" ]; then
	  sdlfolder=$sdl
	else
	  sdlfolder=$destination/$ans
	fi
	echo "  I will use $sdlfolder"
	[ ! -e "$sdlfolder" ] && mkdir $sdlfolder
	echo "Please copy here all the *.sdl files from the client dataset id: $dataset">$sdlfolder/README

  age="$destination/$age"
	get_default age global
  echo
	echo -en "* Please enter location of your age folder (relative to $path, default $age): "
	read ans
	if [ -z "$ans" ]; then
	  agefolder=$age
	else
	  agefolder=$destination/$ans
	fi
	echo "  I will use $agefolder"
	[ ! -e "$agefolder" ] && mkdir $agefolder
	echo "Please copy here all the *.age files from the client dataset id: $dataset">$agefolder/README
 
	doet=0
	while [ $doet -ne 1 ];
	do
		echo
 		echo -en "* Do you want to use a single database ? [y/n] (default y): "
		read ans
		[ -z "$ans" ] && ans="y"
		case "$ans" in
	  	n|N)	single_db=0
						doet=1
			;;
			y|Y)	single_db=1
						doet=1
		    		echo
		    		echo "Huru needs access to a MySql database, you need to create a user with permissions to create databases, and to be able to create/delete/modify tables in the created databases"
						echo
						get_default db_server global
						echo -en "* Please set the MySQL host: (default $db_server, enter n to use a socket): "
						read db_host
						[ -z "$db_host" ] && db_host=$db_server
						case "$db_host" in
						  n|N)	db_host=""
										echo "  I will use a socket"
							;;
							*)		echo "  I will use $db_host to connect to database"
							;;
					  esac
						get_default db_username global
						echo -en "* Please set the MySQL user: (default: $db_username): "
						read ans
						db_username="${ans:-$db_username}"
						get_default db_password global
						echo -en "* Please set the MySQL password: (default: $db_password): "
						read ans
						db_password="${ans:-$db_password}"
						get_default db_name global
						echo -en "* Please set the MySQL DatabaseName: (default: $db_name): "
						read ans
						db_name="${ans:-$db_name}"
			;;
			*)		echo "  Invalid choice"
						doet=0
			;;
		esac
	done

	get_default allow_unknown_accounts global
	[ "$allow_unknown_accounts" = "1" ] && allow_unknown_accounts="n"
	[ "$allow_unknown_accounts" = "0" ] && allow_unknown_accounts="y"
	echo
	echo -en "* Do you want to restrict server access to already known accounts"
	echo -en "  (from accounts table) ? [y/n] (default $allow_unknown_accounts): "
	read ans
	[ -z "$ans" ] && ans="$allow_unknown_accounts"
	case "$ans" in
	  y|Y)	echo "  Ok, server will be in restricted mode"
				  allow_unknown_accounts=0
		;;
		*)	echo "  Ok, leaving your server opened, which is the default behavior"
				  allow_unknown_accounts=1
		;;
	esac

	get_default auto_register_account global
	[ "$auto_register_account" = "1" ] && auto_register_account="y"
	[ "$auto_register_account" = "0" ] && auto_register_account="n"
	echo
	echo -en "* Do you want to automatically filling accounts table ? [y/n] (default $auto_register_account): "
	read ans
	[ -z "$ans" ] && ans="$auto_register_account"
	case "$ans" in
		y|Y)	echo "  Ok, we're filling accounts table"
				  auto_register_account=1
		;;
	  *)		echo "  Ok, we're not going to fill in accounts table, whish is the default behavior"
				  auto_register_account=0
		;;
	esac

	#summary

	echo ""
	echo "##############################################################"
	echo "Summary:"
	echo "Path: $path"
	echo "Type: $1"
	echo "Auth: $auth, Tracking: $track, Vault: $vault, Games: $lobby"
	[ -n "$bin" ] && echo "Binaries in: $path/$bin"
	echo "Verbose Level: $verbose_level"
	echo "Bandwidth: $bandwidth"
	echo "Public address: $public_address"
	echo "Global bind: $global_bind"
	echo "Private address: $private_ip"
	echo "Private MASK: $private_mask"
	[ -n "$website" ] && echo "Website: $website"
	echo "Dataset: $dataset"
	echo "Private ages: $private_ages"
	echo "Log path: $logpath"
	echo "sdl folder: $sdlfolder"
	echo "age folder: $agefolder"
	if [ $single_db -eq 1 ]; then
	  echo "Database: single"
		echo "  host: $db_host"
		echo "  user: $db_username"
		echo "  password: $db_password"
		echo "  database: $db_name"
  else
		echo "Database: multiple"
  fi
	echo "######################################################"
	echo "Allow unknown accounts: $allow_unknown_accounts"
	echo "Auto-fill accounts: $auto_register_account"
	echo "##############################################################"


	doet=0;
	while [ $doet -ne 1 ];
	do
		echo -en "Are you sure that these settings are correct? [Y/n]: "
		read res
		case "$res" in
		  y|Y)	echo "  Ok, validating your choices"
						valid=1
						doet=1
			;;
			n|Y)	echo "  Starting again installation"
						valid=0
						doet=1
			;;
			*)		echo "Please, Enter a valid choice..."
						doet=0
			;;
		esac
	done

done

echo "  Populating global definitions"

cd $current

echo "[global]" >>$conf_path
echo "" >>$conf_path
echo "############# SUBSECTION 1 - Global ###########################################" >>$conf_path
echo "" >>$conf_path
echo "# set the logging/verbose level" >>$conf_path
echo "# 3-> print all messages to the stdout (default)" >>$conf_path
echo "# 2-> print only informative and error messages" >>$conf_path
echo "# 1-> print only error messages" >>$conf_path
echo "# 0-> total silence, perfect for daemon mode" >>$conf_path
echo "verbose_level = $verbose_level" >>$conf_path
echo "" >>$conf_path
echo "# set daemon mode (default 0)" >>$conf_path
echo "# daemon = 1" >>$conf_path
echo "" >>$conf_path
echo "# sets the bandwidht in kbps" >>$conf_path
echo "bandwidth = $bandwidth" >>$conf_path
echo "" >>$conf_path
echo "# sets the default global bind address (for all servers)" >>$conf_path
echo "bind = $global_bind" >>$conf_path
echo "" >>$conf_path
[ -n "$public_address" ] && echo "public_address = $public_address" >>$conf_path && echo "" >>$conf_path
echo "private_mask = $private_mask" >>$conf_path
echo "" >>$conf_path
echo "# Warning, Warning, Warning, don't use it, it's preferable to use -p via command line, or the tracking server is not going to be able to spawn servers in the correct ports)" >>$conf_path
echo "# port = 5000" >>$conf_path
echo "" >>$conf_path
[ -n "$website" ] && echo "website = \"$website\"" >>$conf_path && echo "" >>$conf_path
echo "dataset = $dataset" >>$conf_path
echo "" >>$conf_path

echo "# private ages" >>$conf_path
echo "private_ages=\"$private_ages\"" >>$conf_path

echo "" >>$conf_path
echo "# location of sdl and age files" >>$conf_path
echo "sdl = \"$sdlfolder\"" >>$conf_path
echo "age = \"$agefolder\"" >>$conf_path
echo "" >>$conf_path
if [ -n "$bin" ]; then
  echo "# location of huru binaries" >>$conf_path
  echo "bin = \"$bin\"" >>$conf_path
else
  echo "# also if you have installed the servers bins in another place set it here" >>$conf_path
	echo "# bin = bin" >>$conf_path
fi
echo "############# SUBSECTION 2 - Connection timeouts ##############################" >>$conf_path
echo "" >>$conf_path
echo "# WARNING WARNING - UNTESTED - DO AT YOUR OWN RISK!!" >>$conf_path
echo "" >>$conf_path
echo "# Disconnect client after X minutes, if we don't know nothing about it. (default 5 minutes)" >>$conf_path
echo "# connection_timeout = 5" >>$conf_path
echo "" >>$conf_path
echo "# DISCONNECT player session, if he/she is more than X minutes inactive (AFK). (default 15 minutes)" >>$conf_path
echo "# afk_timeout = 15" >>$conf_path
echo "" >>$conf_path
 echo "############# SUBSECTION 3 - DATABASE  ########################################" >>$conf_path
echo "" >>$conf_path
if [ $single_db -eq 1 ]; then
  echo "# global database" >>$conf_path
  echo "db_server = $db_host" >>$conf_path
  echo "db_name = $db_name" >>$conf_path
  echo "db_username = $db_username" >>$conf_path
  echo "db_passwd = $db_password" >>$conf_path
else
	echo "# a global database (optional)" >>$conf_path
	echo "" >>$conf_path
	echo "# the database host" >>$conf_path
	echo "# db_server = "superserver.someplace"" >>$conf_path
	echo "" >>$conf_path
	echo "# the database name" >>$conf_path
	echo "# db_name = "uru_db"" >>$conf_path
	echo "" >>$conf_path
	echo "# the database port" >>$conf_path
	echo "# db_port = 3306" >>$conf_path
	echo "" >>$conf_path
	echo "# database username" >>$conf_path
	echo "# db_username = "uru"" >>$conf_path
	echo "" >>$conf_path
	echo "# database password" >>$conf_path
	echo "# db_passwd = "xk3h8pjhh3"" >>$conf_path
fi
echo "" >>$conf_path
echo "############# SUBSECTION 4 - Number of players limit ##########################" >>$conf_path
echo "" >>$conf_path
echo "# max_players - (Don't touch, leave it big, or you will have problems due to a bug)" >>$conf_path
echo "max_players = $max_players" >>$conf_path
echo "" >>$conf_path
echo "# number of reserved slots for administrative users" >>$conf_path
echo "# reserved_admin_slots = 3" >>$conf_path
echo "" >>$conf_path
echo "# access level required to be able to enter into the reserved admin slot," >>$conf_path
echo "# and bypass other things like the afk timeout." >>$conf_path
echo "# bypass_access_level = 7" >>$conf_path
echo "" >>$conf_path
echo "# options for auth logging" >>$conf_path
echo "allow_unknown_accounts = $allow_unknown_accounts" >>$conf_path
echo "auto_register_account = $auto_register_account" >>$conf_path
echo "" >>$conf_path

cd $destination

#metaserver

meta=0
valid=0

if [ $ask_meta -eq 1 ]; then

	while [ $valid -ne 1 ];
	do

		doet=0

		while [ $doet -ne 1 ];
		do
			echo ""
			echo "** Metaserver **"
			echo "The metaserver stores a list of all public H'uru servers."
			echo "Players will be able to easily locate it and check if it is running."
			echo "To register your shard as a public shard in the metaserver, you need to have"
			echo " the required ports (5000-6000) open to the public."
			echo "Also, you are going to recieve a packet from almlys.dyns.net every 15-30"
			echo " minutes to check if your servers are up and running. Dead servers will be"
			echo " automatically removed in about 48-72 hours. If you did a mistake and you"
			echo " wish to immediatly delete your server from the public list, you will need to"
			echo " manually delete it via the supplyed password, or contacting the maintainer."
			echo " Public servers list is available at: http://alcugs.almlys.dyns.net/servers.php"
			echo ""
			echo -en "* Do you want to register your shard to the public list? [y/n] (default y): "
			read res
			[ -z "$res" ] && res="y"
			case "$res" in
		  	y|Y)	echo "  Your shard will be listed as a public server"
							doet=1
							meta=1
				;;
				n|N)	echo "  Your shard will remain private"
							doet=1
							meta=0
							valid=1
				;;
				*)		echo "  Please, Enter a valid choice..."
							doet=0
				;;
			esac
		done

		if [ $meta -eq 1 ]; then

			echo ""
			echo "The next information is required to register your shard in the public list"
			get_default shard_name tracking
			echo ""
			echo -en "* Shard Name: (your shard name, default $shard_name): "
			read ans
			shard_name="${ans:-$shard_name}"
			get_default shard_website tracking
			echo ""
			echo -en "* Shard Website: (default url $shard_website): "
			read ans
			shard_website="${ans:-$shard_website}"
			get_default shard_description tracking
			echo ""
			echo -en "* Shard Description: (small description about your shard, default is from config): "
			read ans
			shard_description="${ans:-$shard_description}"
			echo "  I will use: $shard_description"
			get_default shard_contact tracking
			echo ""
			echo "Administrative contact: (url or E-mail to contact with the admin, note that"
			echo "is going to be placed in a public website, so the mailto:me AT myserver DOT org"
			echo "notation is recomended to avoid spam, or use a url to a forum)"
			echo -en "* Please enter contact (default $shard_contact): "
			read ans
			shard_contact="${ans:-$shard_contact}"
			get_default shard_password tracking
			echo
			echo "Deletion Password: (If you want to delete the shard from the public list,"
			echo "you will be asked for this password. IMPORTANT!, the password is stored in"
			echo "plain text in the database and may be visible to the metaserver administrators)"
			echo -en "* Enter password (default $shard_password): "
			read ans
			shard_password="${ans:-$shard_password}"

			#summary

			echo ""
			echo "##############################################################"
			echo "Summary:"
			echo "Shard Name: $shard_name"
			echo "Shard Website: $shard_website"
			echo "Shard Description: $shard_description"
			echo "Administrative contact: $shard_contact"
			echo "Deletion Password: $shard_password"
			echo "##############################################################"

			doet=0;
			while [ $doet -ne 1 ];
			do

				echo -en "* Are you sure that these settings are correct? [y/n]: "
				read res
				case "$res" in
		  	y|Y)	valid=1
							doet=1
				;;
				n|N)	valid=0
							doet=1
				;;
				*)		echo "  Please, Enter a valid choice..."
							doet=0
				;;
				esac
			done
		fi
	done
fi

	### meta settings

echo "############# SUBSECTION 5 - Metaserver ########################################" >>$conf_path
echo "" >>$conf_path

if [ $meta -eq 1 ]; then
	echo "enable_metaserver = 1" >>$conf_path
	[ -n "$shard_name" ] && echo "shard_name = \"$shard_name\"" >>$conf_path
	[ -n "$shard_website" ] && echo "shard_website = \"$shard_website\"" >>$conf_path
	[ -n "$shard_description" ] && echo "shard_description = \"$shard_description\"" >>$conf_path
	[ -n "$shard_contact" ] && echo "shard_contact = \"$shard_contact\"" >>$conf_path
	[ -n "$shard_password" ] && echo "shard_password = \"$shard_password\"" >>$conf_path
else
	echo "enable_metaserver = 0">>$conf_path
fi
echo "" >>$conf_path

echo "############# SUBSECTION 6 - Misc ##############################################" >>$conf_path
echo "" >>$conf_path
echo "# read another configuration file" >>$conf_path
echo "# read_config = "private.conf"" >>$conf_path
echo "" >>$conf_path
echo "# .private.conf file is not in the CVS, so it's safe to keep some passwds here" >>$conf_path
echo "# hiden from the public without touching the main example file" >>$conf_path
echo "# read_config = ".private.conf"" >>$conf_path
if [ "$1" == "devel" ]; then
	echo "" >>$conf_path
	echo "#disable the automatic Lobby/Game forking" >>$conf_path
	echo "load_on_demand = 0">>$conf_path
fi
echo "" >>$conf_path

rm -f $destination/var/servers.list
touch $destination/var/servers.list


#now ask the per server settings
if [ $auth -eq 1 ]; then

	echo "auth" >> $destination/var/servers.list

	if [ ! -e "auth" ]; then
		mkdir auth
	fi
	cd auth
	if [ "$1" == "devel" ]; then
		if [ ! -e "uru_auth" ]; then
			ln -s ../uru_auth
		fi
	else
	  if [ -n "$bin" ]; then
		  cp -f "$current/uru_auth" $bin
		else
		  cp -f "$current/uru_auth" .
		fi
	fi


	valid=0

	while [ $valid -ne 1 ];
	do

		echo ""
		echo "__________________________________________________________________"
		echo "** Setting up the Auth Server **"
		if [ $single_db -eq 0 ]; then
			echo "The auth server needs access to a MySql database, you need to create a user with permissions to create databases, and to be able to create/delete/modify tables in the created databases"
			get_default db_server auth
		  echo "Please set the MySQL Auth host: (default $db_server, enter n to use a socket) "
		  read auth_db_host
      [ -z "$auth_db_host" ] && auth_db_host=$db_server
			case "$auth_db_host" in
				n|N)  auth_db_host=""
							echo "  I will use a socket"
				;;    
				*)    echo "  I will use $auth_db_host to connect to database"
				;;    
			esac
			get_default db_username auth
		  echo "Please set the MySQL Auth user (default: $db_username): "
		  read ans
			auth_db_username="${ans:-$db_username}"
			get_default db_password auth
		  echo "Please set the MySQL Auth password (default: $db_password): "
		  read ans
			auth_db_password="${ans:-$db_password}"
			get_default db_name auth
		  echo "Please set the MySQL Auth DatabaseName (default: $db_name):"
		  read ans
			auth_db_name="${ans:-$db_name}"
		fi

		echo ""
		if [ $single_db -eq 0 ]; then
		  echo "########## Auth Database #############################"
		  echo "Host: $auth_db_host"
		  echo "Username: $auth_db_username"
		  echo "Password: $auth_db_password"
		  echo "Database: $auth_db_name"
	  fi

		doet=0;

		while [ $doet -ne 1 ];
		do
		  echo
			echo -en "* Are these setting OK? [Y/n]:"
			read res
			case "$res" in
		  	y|Y)	valid=1
							doet=1
				;;
				n|N)	valid=0
							doet=1
				;;
				*)		echo "Please, Enter a valid choice..."
							doet=0
				;;
			esac
		done

	done

	echo "############# Main Section Auth ################################################" >>$conf_path
	echo "[auth]" >>$conf_path
	if [ "$private_ip" == "0.0.0.0" ]; then
    auth_ip="127.0.0.1"
  else
    auth_ip=$private_ip
	fi
  echo "bind = $auth_ip" >>$conf_path
	echo "port = 2010" >>$conf_path
	echo "log_files_path = $logpath/auth/" >>$conf_path
	[ ! -d "$logpath/auth" ] && mkdir -p $logpath/auth

	if [ $single_db -eq 0 ]; then
		[ -n "$auth_db_host" ] && echo "db_server = $auth_db_host">>$conf_path
	  [ -n "$auth_db_name" ] && echo "db_name = $auth_db_name">>$conf_path
	  [ -n "$auth_db_username" ] && echo "db_username = $auth_db_username">>$conf_path
	  [ -n "$auth_db_password" ] && echo "db_passwd = $auth_db_password">>$conf_path
	fi

  echo "" >>$conf_path

	cd ..

else
	echo "Please enter the address of the node that runs the auth server:"
	read auth_ip
fi


#now ask the per server settings
if [ $track -eq 1 ]; then

	echo "tracking" >> $destination/var/servers.list

	if [ ! -e "tracking" ]; then
		mkdir tracking
	fi
	cd tracking
	if [ "$1" == "devel" ]; then
		if [ ! -e "uru_tracking" ]; then
			ln -s ../uru_tracking
		fi
	else
	  if [ -n "$bin" ]; then
			cp -f "$current/uru_tracking" $bin
		else
			cp -f "$current/uru_tracking" .
		fi
	fi

	valid=0

	echo ""
	echo "__________________________________________________________________"
	echo "** Setting up the Tracking Server **"

  echo "" >>$conf_path
  echo "############# Main Section Tracking ############################################" >>$conf_path
	echo "[tracking]" >>$conf_path

	echo "bind = $private_ip" >>$conf_path
	echo "port = 2011">>$conf_path
	echo "log_files_path = $logpath/tracking/" >>$conf_path
	[ ! -d "$logpath/tracking" ] && mkdir -p $logpath/tracking

	if [ "$1" == "devel" ]; then
		#disable the multiple instance mode
		echo "instance_mode = 0" >>$conf_path
	fi

	if [ -n "$dataset" ]; then
		echo "dataset = $dataset" >>$conf_path
	fi

	if [ "$private_ip" == "0.0.0.0" ]; then
		track_ip="127.0.0.1"
	else
		track_ip=$private_ip
	fi

	cd ..

else
	echo "Please enter the address of the node that runs the tracking server:"
	read track_ip
fi

#now ask the per server settings
if [ $vault -eq 1 ]; then

	echo "vault" >> $destination/var/servers.list

	if [ ! -e "vault" ]; then
		mkdir vault
	fi
	cd vault
	if [ "$1" == "devel" ]; then
		if [ ! -e "uru_vault" ]; then
			ln -s ../uru_vault
		fi
	else
	  if [ -n "$bin" ]; then
		  cp -f "$current/uru_vault" $bin
		else
		  cp -f "$current/uru_vault" .
		fi
	fi

	valid=0

	while [ $valid -ne 1 ];
	do

		echo ""
		echo "__________________________________________________________________"
		echo "** Setting up the Vault Server **"
		if [ $single_db -eq 0 ]; then
		  echo "The vault server needs access to a MySql database, you need to create a user with permissions to create databases, and to be able to create/delete/modify tables in the created databases"
			get_default db_server vault
		  echo "Please set the MySQL Vault host: (default $db_server, enter n to use a socket) "
		  read vault_db_host
      [ -z "$vault_db_host" ] && vault_db_host=$db_server
			case "$vault_db_host" in
				n|N)  vault_db_host=""
							echo "  I will use a socket"
				;;    
				*)    echo "  I will use $vault_db_host to connect to database"
				;;    
			esac
			get_default db_username vault
		  echo "Please set the MySQL Vault user (default: $db_username): "
		  read ans
			vault_db_username="${ans:-$db_username}"
			get_default db_password vault
		  echo "Please set the MySQL Vault password (default: $db_password): "
		  read ans
			vault_db_password="${ans:-$db_password}"
			get_default db_name vault
		  echo "Please set the MySQL Vault DatabaseName (default: $db_name):"
		  read ans
			vault_db_name="${ans:-$db_name}"
		fi

		get_default neighborhood_name vault
		get_default neighborhood_comment vault
		echo ""
		echo "Vault defaults:"
		echo "You can set the name of the default Neighborhood, and optionnal comment for it"
		echo "Actual values are:"
		echo "Name: $neighborhood_name"
		echo "Comment: $neighborhood_comment"
		echo "Do you want to change ?"
		read ans
		case "$ans" in
		  y|Y)	echo "Please set the neighborhood name:"
			read neighborhood_name
			echo "Please set the neighborhood comment:"
			read neighborhood_comment
			;;
			*)	echo "Ok, leaving neighborhood defaults"
			;;
		esac

    if [ $single_db -eq 0 ]; then
		  echo "########## Vault Database ############################"
		  echo "Host: $vault_db_host"
		  echo "Username: $vault_db_username"
		  echo "Password: $vault_db_password"
		  echo "Database: $vault_db_name"
		fi
		echo "########## Initial vault data ########################"
		echo "Neighborhood Name: $neighborhood_name"
		echo "Neighborhood Description: $neighborhood_comment"
		echo "######################################################"

		doet=0;

		while [ $doet -ne 1 ];
		do
			echo
			echo "* Are these setting OK? [Y/n]:"
			read res
			case "$res" in
		  	y|Y)	valid=1
							doet=1
				;;
				n|N)	valid=0
							doet=1
				;;
				*)		echo "Please, Enter a valid choice..."
							doet=0
				;;
			esac
		done

	done

  echo "" >>$conf_path
  echo "############# Main Section Vault ############################################" >>$conf_path
	echo "[vault]" >>$conf_path

	if [ "$private_ip" == "0.0.0.0" ]; then
		vault_ip="127.0.0.1"
	else
		vault_ip=$private_ip
	fi
  echo "bind = $private_ip" >>$conf_path
	echo "port = 2012" >>$conf_path
	echo "log_files_path = $logpath/vault/" >>$conf_path
	[ ! -d "$logpath/vault" ] && mkdir -p $logpath/vault

  if [ $single_db -eq 0 ]; then
	  [ -n "$vault_db_host" ] && echo "db_server = $vault_db_host" >>$conf_path
	  [ -n "$vault_db_name" ] && echo "db_name = $vault_db_name" >>$conf_path
  	[ -n "$vault_db_username" ] && echo "db_username = $vault_db_username" >>$conf_path
  	[ -n "$vault_db_password" ] && echo "db_passwd = $vault_db_password" >>$conf_path
	fi

	[ -n "$neighborhood_name" ] && echo "neighborhood_name = \"$neighborhood_name\"" >>$conf_path
	[ -n "$neighborhood_comment" ] && echo "neighborhood_comment = \"$neighborhood_comment\"" >>$conf_path

	if [ "$1" == "devel" ]; then
		#disable the multiple instance mode
		echo "instance_mode = 0" >>$conf_path
	fi

	cd ..

else
	echo "Please enter the address of the node that runs the vault server:"
	read vault_ip
fi

#now ask the per server settings
if [ $lobby -eq 1 ]; then

	echo "lobby" >> $destination/var/servers.list

	if [ ! -e "lobby" ]; then
		mkdir lobby
	fi
	cd lobby
	if [ "$1" == "devel" ]; then
		if [ ! -e "uru_lobby" ]; then
			ln -s ../uru_lobby
		fi
		if [ ! -e "uru_game" ]; then
			ln -s ../uru_game
		fi
		#only for devel
		ln -s ../servers.list
		ln -s ../run.sh
	else
	  if [ -n "$bin" ]; then
			cp -f "$current/uru_lobby" $bin
			cp -f "$current/uru_game" $bin
	  else
			cp -f "$current/uru_lobby" .
			cp -f "$current/uru_game" .
		fi
	fi

  echo "" >>$conf_path
  echo "############# Main Section Lobby ############################################" >>$conf_path
	echo "[lobby]" >>$conf_path
	echo "log_files_path = $logpath/lobby/" >>$conf_path
	[ ! -d "$logpath/lobby" ] && mkdir -p $logpath/lobby

	cd ..

fi

if [ "$1" == "devel" ]; then

#only for development
	mkdir game1
	cd game1
	ln -s ../uru_game
	ln -s ../servers.list
	ln -s ../run.sh
	cp ../lobby/uru.conf .
	cd ..

	cp -rf game1 game2
	cp -rf game2 game3

fi


# #create the start.sh
# 
# echo "#!/bin/sh" > start.sh
# chmod 755 start.sh
# echo "#This is an autogenerated file" >> start.sh
# echo "ulimit -c unlimited">>start.sh
# 
# if [ $auth -eq 1 ]; then
# 
# 	echo "echo \"Starting Auth Server...\"">> start.sh
# 	echo "cd auth">>start.sh
# 	echo "./uru_auth -D">>start.sh
# 	echo "cd .." >> start.sh
# 
# fi
# 
# 
# if [ $track -eq 1 ]; then
# 
# 	echo "echo \"Starting Tracking Server...\"">> start.sh
# 	echo "cd tracking" >> start.sh
# 	echo "./uru_tracking -D" >> start.sh
# 	echo "cd .." >> start.sh
# 
# fi
# 
# if [ $vault -eq 1 ]; then
# 
# 	echo "echo \"Starting Vault Server...\"">> start.sh
# 	echo "cd vault" >> start.sh
# 	echo "./uru_vault -D" >> start.sh
# 	echo "cd .." >> start.sh
# 
# fi
# 
# if [ $lobby -eq 1 ]; then
# 
# 	echo "echo \"Starting Lobby & Game(s) Server(s)...\"">> start.sh
# 	echo "cd lobby" >> start.sh
# 	echo "./uru_lobby -D" >> start.sh
# 	echo "cd .." >> start.sh
# 
# fi

echo ""
echo "** Setting up init script **"
echo ""

#cp "$current/script/huru_servers.sh" .
lines=`wc -l $current/script/huru-servers.sh | awk '{print $1}'`
nh=`grep -n ____HEAD____ $current/script/huru-servers.sh | cut -d ":" -f1`
nt=`grep -n ____BODY____ $current/script/huru-servers.sh | cut -d ":" -f1`
let lines=$lines-$nt
let lines++

head -n $nh $current/script/huru-servers.sh > huru_servers.sh
echo "### EDIT THESE ##########">>huru_servers.sh
echo "# Full Path to H'uru Root:">>huru_servers.sh
echo "HURU_ROOT=$destination">>huru_servers.sh
echo "# User to run servers as. (root == bad)">>huru_servers.sh
echo "RUNAS=$runuser">>huru_servers.sh
tail -n $lines $current/script/huru-servers.sh >>huru_servers.sh

chmod 755 huru_servers.sh

echo ""
echo "If all went OK, then the server(s) may be correctly installed at $path ($destination) and you can start/stop them typing ./huru_servers.sh (thx 2 Sjaak)"

# TODO: Finish the script

rm -f $config

