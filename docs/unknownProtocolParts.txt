This describes parts of the protocol which were guessed, unknown bytes which always have the same value and similar problems. I don't list all the plMessages here as the server barely cares about them - it shouldn't be its business to parse them at all, and it only does so to work around some protocol flaws and Uru bugs.

Uru network message basis:
- Weired flags in NetMsgJoinReq: 0x00400000 = plNetIP (libPlasma: kAllowTimeOut?!?) indicates that an IP address follows in the header (or is that already part of the message body?), 0x08000000 = plNetP2P (not in libPlasma) is also set. Old servers set 0x00000020 = plNetFirewalled (libPlasma: kIndirectMember) in the NetMsgJoinAck reply, but not doing so changed nothing.

NetMsgs which are more or less completely unknown:
- NetMsgTestAndSet: Alcugs can parse this, and if "lockReq" is set to 1, it replies with a plServerReplyMsg with the reply type set to "affirm". However, the actual purpose is unknown. I think the server is supposed to do more than just reply and forget about it, it sounds almost as if some kind of lock has to be acquired. I can't see any issue in-game which I connect to this, except for some weird problems with footstep sounds not always working if there is a big footstep region around the link-in point, but all of this is wild guessing.
- NetMsgPlayerPage: The format of this one is completely known, but why should anyone acre about the avatar paging in or out? The server currently ignores it.
- NetMsgRelevanceRegions: It contains two bitfields (8 bytes each) saying what is relevant for the sender. The server currently ignores it, not knowing which events to filter according to these regions and which not (maybe all those where the plNetRelRegions flag is set?).

NetMsgs containing unknown bytes:
- NetMsgSetMyActivePlayer: The last byte is always 0, meaning unknown.
- NetMsgCreatePlayer: The last four bytes are always 0, meaning unknown.
- NetMsgDeletePlayer: The last two bytes are always 0, meaning unknown.
- NetMsgJoinAck: The first two bytes of the body, to which the log refers to as "joinOrder" and "ExpLevel", are always 0 and have unknown meaning.
- NetMsgMemberUpdate, NetMsgMembersList: The structure describing a member always starts with 0x00000020, the meaning of these four bytes is unknown - most likely a flag. In addition, the last byte of the plClientGuid is always zero - it might be the "reserved" field, but according to libPlasma that's supposed to be two bytes?

Vault protocol:
- AgeLinkStruct: Between linking rule and spawn point, there are four bytes: 0x00000001. Their meaning is unknown.
- VaultNode: The meaning of 0x00000004 being set on the second 4 bytes of the giant 64bit flag.
- VaultItem: (the struct containing a node, a node reference, an age link struct, ...): After the id, there is an unknown byte which is always 0.

SDL protocol:
- How should a "SDL State Binary" (plStateDataRecord - the binary representation of a whole SDL state) be treated differently if it is set to "volatile"? Maybe not save it but just do a broadcast? Or save it for now, but not when the server is shutting down?
- I'm not sure what the correct behaviour is if I get an indexed (partial) update for an SDL containing another indexed SDL. Currently, Alcugs removes the old sub-SDL and replaces it with the new one. It might be more correct to recursively merge the sub-SDLs, but what to do if they are in a dynamically sized element, and the old and new sizes don't match - how to decide which structs to merge in this case?
