AC_REVISION($Id$)
AC_PREREQ(2.58)

#init
AC_INIT([alcugs],[1.3.3])
AC_CONFIG_SRCDIR(README)
AM_INIT_AUTOMAKE
AC_CONFIG_HEADERS([include/alcbase/alcconfig.h])

AH_TOP([#ifndef __U_ALCCONFIG_H
#define __U_ALCCONFIG_H])
AH_BOTTOM([
#endif])

#CXXFLAGS="-Wall -rdynamic -g3 -O0"

#Platform info
AC_CANONICAL_HOST
AC_DEFINE_UNQUOTED(_PLATFORM_, "${host}",
[Define this to be the canonical name (cpu-vendor-os) of your sytem.])
AC_DEFINE_UNQUOTED(_CPU_,"${host_cpu}",
[Define this to be the name of the CPU of your system.])
AC_DEFINE_UNQUOTED(_VENDOR_,"${host_vendor}",
[Define this to be the name of the vendor of your system.])
AC_DEFINE_UNQUOTED(_OS_, "${host_os}",
[Define this to be the name of the OS of your system.])

#progs
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL

AC_LANG(C++)

#headers
AC_HEADER_STDC
AC_CHECK_HEADERS([unistd.h])

#Platform specific
WIN32=false
RDYNAMIC=false
case "${host}" in
	*-*-cygwin* | *-*-mingw32* )
		WIN32=true
		LIBS="${LIBS} -lwsock32"
	;;
	*)
	;;
esac

EXTRAFLAGS="-g0 -O3"
AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging (default NO)],
[case "${enableval}" in
  yes) EXTRAFLAGS="-g3 -O0"
       RDYNAMIC=true
       AC_DEFINE([ENABLE_DEBUG],[],[Enable debugging])
       ;;
  no)   ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac])

CXXFLAGS="-Wall"

if test x$RDYNAMIC = xtrue; then
	CXXFLAGS="$CXXFLAGS -rdynamic"
fi

CXXFLAGS="$CXXFLAGS $EXTRAFLAGS"


#threads (this MUST be after above lines)
AC_ARG_ENABLE(threads, [  --enable-threads        Enables threads (UNIMPLEMENTED - default NO)],
     [case "${enableval}" in
       yes) THREADS=true ;;
       no)  THREADS=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-threads) ;;
     esac],[THREADS=false])

	if test x$THREADS = xtrue ; then
		THREADSWORK=false
		AC_CHECK_HEADERS([pthread.h], [AC_CHECK_LIB(pthread,pthread_create, [THREADSWORK=true] , AC_MSG_FAILURE([pthreads not found in your system (but I saw the header)]))], AC_MSG_RESULT([[ pthreads not found in your system!]]))
	fi
	if test x$THREADSWORK = xtrue; then
		AC_DEFINE([ENABLE_THREADS],[],[Enable threads])
		LIBS="$LIBS -lpthread"
	fi
	if test x$WIN32 = xtrue && test x$THREADS = xtrue ; then
		THREADSWORK=true
		AC_DEFINE([ENABLE_THREADS],[],[Enable threads])
	fi
	if test x$THREADSWORK = xtrue ; then
		#I'm not sure about these ones (If them should, or not be defined)
		AC_DEFINE([THREAD_SAFE],[],[Set thread safe def])
		AC_DEFINE([_REENTRANT],[],[Set reentrant def])
	fi

#Zlib
AC_CHECK_HEADERS([zlib.h], , AC_MSG_FAILURE([zlib.h not found!]))
AC_CHECK_LIB(z,compress, , AC_MSG_FAILURE([zlib not found!]))

#expat
AC_ALC_WITHPATH([expat.h],expat,XML_ParserCreate,
	[AC_SUBST(EXPAT_CPPFLAGS,$ac_alc_withpath_CPPFLAGS)
	 AC_SUBST(EXPAT_LDFLAGS,$ac_alc_withpath_LDFLAGS)])

#MySQL
AC_ALC_MYSQL


# Linux libc stack info
AC_CHECK_HEADERS([execinfo.h])

#check for google/coredumper.h
#AC_CHECK_HEADERS([google/coredumper.h], AC_SUBST(GOOGLE_LIBS,-lcoredumper), AC_MSG_RESULT([[ Support for Google coredumper dissabled, you may want to download coredumper from goog-coredumper.sf.net ]]))

AC_ARG_WITH([coredumper],
 [AS_HELP_STRING(--with-coredumper,link against google coredumper (default YES))])

	if test "${with_coredumper}" != "no" ; then
		AC_CHECK_HEADERS([google/coredumper.h], [AC_CHECK_LIB(coredumper,WriteCoreDump, , AC_MSG_FAILURE([Google coredumper not found (but I have found the header !?)]))], AC_MSG_RESULT([[ Support for Google coredumper disabled, you may want to download coredumper from goog-coredumper.sf.net ]]))
	fi

#dmalloc
AC_ARG_WITH([dmalloc],
 [AS_HELP_STRING(--with-dmalloc,link against dmalloc (default NO))])

	if test x$THREADS = xtrue; then
		if test "${with_dmalloc}" == "yes" ; then
			AC_CHECK_HEADERS([dmalloc.h],
			[AC_SEARCH_LIBS(dmalloc_verify,[dmallocthcxx dmallocth], , AC_MSG_FAILURE([Cannot find dmalloc]))], AC_MSG_FAILURE([[cannot find dmalloc ]]))
		fi
	else
		if test "${with_dmalloc}" == "yes" ; then
			AC_CHECK_HEADERS([dmalloc.h],
			[AC_SEARCH_LIBS(dmalloc_verify,[dmallocxx dmalloccxx dmalloc], , AC_MSG_FAILURE([Cannot find dmalloc]))], AC_MSG_FAILURE([[cannot find dmalloc ]]))
		fi
	fi

#types
#structures

# program config
AC_ARG_ENABLE(unet2, [  --enable-unet2          Enables the unet2 protocol (default YES)],
 [case "${enableval}" in
       yes) AC_DEFINE([ENABLE_UNET2],[],[Enable unet2 protocol]) ;;
       no) ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-unet2) ;;
     esac],[AC_DEFINE([ENABLE_UNET2],[],[Enable unet2 protocol])])
AC_ARG_ENABLE(admin, [  --enable-admin          Enables possibly dangerous admin options in alcping (default NO)],
 [case "${enableval}" in
       yes) AC_DEFINE([ENABLE_ADMIN],[],[Enable possibly dangerous admin options]) ;;
       no) ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-admin) ;;
     esac])
AC_ARG_ENABLE(msglog, [  --enable-msglog         Enables detailed logs about incoming and outgoing messages (default YES)],
 [case "${enableval}" in
       yes) AC_DEFINE([ENABLE_MSGLOG],[],[Enables detailed logs about incoming and outgoing messages]) ;;
       no) ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-msglog) ;;
     esac], [AC_DEFINE([ENABLE_MSGLOG],[],[Enables detailed logs about incoming and outgoing messages])])
AC_ARG_ENABLE(ackdebug, [  --enable-ackdebug       Enables detailed logs about the ack stack (default NO)],
 [case "${enableval}" in
       yes) AC_DEFINE([ENABLE_ACKDEBUG],[],[Enables detailed logs about the ack stack]) ;;
       no) ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-ackdebug) ;;
     esac])
AC_ARG_ENABLE(netdebug, [  --enable-netdebug       Enables noise and latency debuging tests (default NO)],
 [case "${enableval}" in
       yes) AC_DEFINE([ENABLE_NETDEBUG],[],[Enables noise and latency debuging tests]) ;;
       no) ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-netdebug) ;;
     esac])
AC_ARG_ENABLE(msgdebug, [  --enable-msgdebug       Enables (byte-level) logging of message content (default NO)],
 [case "${enableval}" in
       yes) AC_DEFINE([ENABLE_MSGDEBUG],[],[Enables (byte-level) logging of message content]) ;;
       no) ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-msgdebug) ;;
     esac])

#compiler specific
AC_C_CONST
AC_C_BIGENDIAN
AC_ALC_ALIGN

#library funs
AC_PROG_GCC_TRADITIONAL
#system services


# vars
#AC_ARG_VAR([ALC_DBG_LEVEL],
#[Debug Level])


#AC_SUBST(ALC_LIBS,[${ALC_LIBS}])
AM_CONDITIONAL(WIN32, test x$WIN32 = xtrue)

AC_DEFINE_UNQUOTED([ALC_LIBS],["${LIBS}"],[Alcugs libs])
AC_DEFINE_UNQUOTED([ALC_CXXFLAGS],["${CXXFLAGS}"],[Alcugs CXXFLAGS])
AC_DEFINE_UNQUOTED([ALC_CPPFLAGS],["${CPPFLAGS}"],[Alcugs CPPFLAGS])
AC_DEFINE_UNQUOTED([ALC_INCLUDEPATH],["`eval echo ${includedir}`"],[Alcugs Include Path])

restoreme=0
if test "x${exec_prefix}" == "xNONE" ; then
	exec_prefix=$prefix
	restoreme=1
fi

AC_DEFINE_UNQUOTED([ALC_LIBSPATH],["`eval echo ${libdir}`"],[Alcugs Libs Path])

if test "x$restoreme" == "x1" ; then
	exec_prefix="NONE"
fi

#out
AC_CONFIG_FILES([Makefile docs/Makefile include/Makefile])
AC_OUTPUT

